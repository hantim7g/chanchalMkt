package com.marketing.hst;



import java.net.URLDecoder;
import java.util.Date;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RestController;

import com.google.protobuf.Api;

import jakarta.servlet.http.HttpSession;

import org.springframework.mail.SimpleMailMessage;
import org.springframework.mail.javamail.JavaMailSender;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class MktRestController {

@Autowired
ProfileDetailsRepository repo;
@Autowired
ProductRepository pdtRepo;

    private final JavaMailSender javaMailSender;

    public MktRestController(JavaMailSender javaMailSender) {
        this.javaMailSender = javaMailSender;
    }

	@PostMapping("/updateStatus")
	public @ResponseBody ApiResponse updateStatus(@RequestBody ProfileDetails profile,HttpSession ht) {
		ApiResponse response = new ApiResponse();
		try {
			repo.updateStatusById(profile.getProfileDtlsId(), profile.getStatus());
			response.setValid(true);
			return response;
		} catch (Exception e) {
			e.printStackTrace();
			response.setValid(false);
			return response;
		}

    }

	@PostMapping("/saveproduct")
	public @ResponseBody ApiResponse saveproduct(@RequestBody Product product,HttpSession ht) {
		ApiResponse response = new ApiResponse();
		Long profileId =Long.parseLong(ht.getAttribute("login").toString());
		product.setProfileDtlsId(profileId);
		product.setStopOrder(0);
		try {
			pdtRepo.save(product);
			response.setValid(true);
			return response;
		} catch (Exception e) {
			e.printStackTrace();
			response.setValid(false);
			return response;
		}

    }
	
	
    @PostMapping("/sendEmail")
    public ApiResponse sendEmail(@RequestBody String encodedEmail) {
    	ApiResponse response = new ApiResponse();
     
    	try {
            String decodedEmail = URLDecoder.decode(encodedEmail, "UTF-8");
            
            // Extract the email from the decoded string (assuming encodedEmail is in the format "email=encodedEmailAddress")
            String email = decodedEmail.split("=")[1];
            
            // Generate a random password
            String autogeneratedPassword = RandomPasswordGenerator.generateRandomPassword(12);
            SimpleMailMessage message = new SimpleMailMessage();
            message.setTo(email);
            message.setSubject("Password Recovery");
            message.setText("Your autogenerated password is: " + autogeneratedPassword);
            
            javaMailSender.send(message);
            updatePasswordAndEmail(autogeneratedPassword, email);
            response.setView("Sucess! Email sent successfully");
            return response;
        } catch (Exception e) {
            e.printStackTrace();
            response.setView("Failed! Please try again");
            return response;
        }
    }

    public void updatePasswordAndEmail(String newPassword, String loginMail) {
        List<ProfileDetails> existingProfileDetails = repo.findByloginMail(loginMail);

        if (existingProfileDetails!=null && existingProfileDetails.size()>0) {
            // If the email exists, update the newPassword for the existing record
            ProfileDetails profileDetails = existingProfileDetails.get(0);
            profileDetails.setNewPassword(newPassword);
            repo.save(profileDetails); // Update existing record
        } else {
            // If the email does not exist, create a new ProfileDetails entity
            ProfileDetails newProfileDetails = new ProfileDetails();
            newProfileDetails.setLoginMail(loginMail);
            newProfileDetails.setNewPassword(newPassword);
            newProfileDetails.setRole("Buyer");
            newProfileDetails.setStatus("Active");
            Date javaDate = new Date();
            
            java.sql.Date sqlDate = new java.sql.Date(javaDate.getTime());
            
            newProfileDetails.setJoinDate(sqlDate); 
            
            repo.save(newProfileDetails); // Create new entry
        }
    }
    
    @Autowired
    private BrandRepository brandRepository;  
    @PostMapping("/saveBrand")
    public ApiResponse saveBrand(@RequestBody Brand brand) {
    	ApiResponse ar= new ApiResponse();
    	brand.setStatus("Active");
    	try {
            brandRepository.save(brand);
            ar.setValid(true);
            return ar;
        } catch (Exception e) {
            e.printStackTrace();
            ar.setValid(false);
            return ar;
        }
    }

    //    @PostMapping("/sendEmail")
//    public ApiResponse sendEmail(@RequestBody String email) {
//        // Generate a random password
//        String autogeneratedPassword = "GeneratedPassword123"; // You can use a random password generator
//        
//        SimpleMailMessage message = new SimpleMailMessage();
//        message.setTo(email);
//        message.setSubject("Password Recovery");
//        message.setText("Your autogenerated password is: " + autogeneratedPassword);
//        
//        javaMailSender.send(message);
//        
//         ApiResponse response = new ApiResponse();
//         response.setView("Email sent successfully");
//        return response;
//    }
//	
	
//    @Autowired
//    private AmazonAdService amazonAdService;

   // @GetMapping("/getAmazonAd/{asin}")
//    public String getAmazonAd(@PathVariable String asin) {
//        return amazonAdService.getAmazonProductAd(asin);
//    }
}
